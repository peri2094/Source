
8. Linetracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cb8  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f3  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000612  00000000  00000000  00001bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  000021dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f1  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fc  00000000  00000000  00002839  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002c35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	aa c0       	rjmp	.+340    	; 0x17a <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5e c0       	rjmp	.+188    	; 0xfa <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e8       	ldi	r30, 0x8E	; 142
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	62 c1       	rjmp	.+708    	; 0x38a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	8b e7       	ldi	r24, 0x7B	; 123
  cc:	92 e9       	ldi	r25, 0x92	; 146
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x6>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x10>
  d8:	00 00       	nop
int main(void)
{
	_delay_ms(3000); // 3초후 동작
	
	int error_val;
	sensor_init();   // 포트C를 센서 입력으로 설정
  da:	f0 d0       	rcall	.+480    	; 0x2bc <sensor_init>
	motor1_init();
  dc:	aa d0       	rcall	.+340    	; 0x232 <motor1_init>
	motor2_init();
  de:	ba d0       	rcall	.+372    	; 0x254 <motor2_init>
	
    while (1) 
    {
		error_val = get_error(get_sensor()); // 에러값 저장 (-3 ~ +3)
  e0:	f1 d0       	rcall	.+482    	; 0x2c4 <get_sensor>
  e2:	f4 d0       	rcall	.+488    	; 0x2cc <get_error>
  e4:	ec 01       	movw	r28, r24
		
		motor1_get_spd(error_val);
  e6:	c7 d0       	rcall	.+398    	; 0x276 <motor1_get_spd>
  e8:	ce 01       	movw	r24, r28
		motor2_get_spd(error_val);
  ea:	d7 d0       	rcall	.+430    	; 0x29a <motor2_get_spd>
  ec:	8f e9       	ldi	r24, 0x9F	; 159
  ee:	9f e0       	ldi	r25, 0x0F	; 15
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x28>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x2e>
  f6:	00 00       	nop
  f8:	f3 cf       	rjmp	.-26     	; 0xe0 <main+0x18>

000000fa <__vector_15>:
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
﻿#include "motor.h"

ISR(TIMER0_COMP_vect)
{
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	0b b6       	in	r0, 0x3b	; 59
 106:	0f 92       	push	r0
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	00 d0       	rcall	.+0      	; 0x11a <__vector_15+0x20>
 11a:	00 d0       	rcall	.+0      	; 0x11c <__vector_15+0x22>
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
	static unsigned int i = 0;
	int j;
	char out_val1[4] = {0x09, 0x0C, 0x06, 0x03};
 120:	89 e0       	ldi	r24, 0x09	; 9
 122:	89 83       	std	Y+1, r24	; 0x01
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	8a 83       	std	Y+2, r24	; 0x02
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	8b 83       	std	Y+3, r24	; 0x03
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	8c 83       	std	Y+4, r24	; 0x04
	
	j = (i++) % 4;
 130:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i.1741>
 134:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i.1741+0x1>
 138:	9c 01       	movw	r18, r24
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <i.1741+0x1>
 142:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <i.1741>
	PORTA = out_val1[j];
 146:	83 70       	andi	r24, 0x03	; 3
 148:	99 27       	eor	r25, r25
 14a:	fe 01       	movw	r30, r28
 14c:	e8 0f       	add	r30, r24
 14e:	f9 1f       	adc	r31, r25
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	8b bb       	out	0x1b, r24	; 27
}
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0b be       	out	0x3b, r0	; 59
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_9>:

ISR(TIMER2_COMP_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	0b b6       	in	r0, 0x3b	; 59
 186:	0f 92       	push	r0
 188:	2f 93       	push	r18
 18a:	3f 93       	push	r19
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	00 d0       	rcall	.+0      	; 0x19a <__vector_9+0x20>
 19a:	00 d0       	rcall	.+0      	; 0x19c <__vector_9+0x22>
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
	static unsigned int i = 0;
	int j;
	char out_val2[4] = {0x03, 0x06, 0x0C, 0x09}; 
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	89 83       	std	Y+1, r24	; 0x01
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	8a 83       	std	Y+2, r24	; 0x02
 1a8:	8c e0       	ldi	r24, 0x0C	; 12
 1aa:	8b 83       	std	Y+3, r24	; 0x03
 1ac:	89 e0       	ldi	r24, 0x09	; 9
 1ae:	8c 83       	std	Y+4, r24	; 0x04
	
	j = (i++) % 4;
 1b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 1b8:	9c 01       	movw	r18, r24
 1ba:	2f 5f       	subi	r18, 0xFF	; 255
 1bc:	3f 4f       	sbci	r19, 0xFF	; 255
 1be:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_end+0x1>
 1c2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_end>
	PORTB = out_val2[j];
 1c6:	83 70       	andi	r24, 0x03	; 3
 1c8:	99 27       	eor	r25, r25
 1ca:	fe 01       	movw	r30, r28
 1cc:	e8 0f       	add	r30, r24
 1ce:	f9 1f       	adc	r31, r25
 1d0:	81 81       	ldd	r24, Z+1	; 0x01
 1d2:	88 bb       	out	0x18, r24	; 24
}
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0b be       	out	0x3b, r0	; 59
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <motor1_set_spd>:

void motor1_set_spd(int pps1) // pps1, 2의 값을 (기준속도 - 에러값에 따른 오차수정값으로 설정)
{
 1fa:	bc 01       	movw	r22, r24
	if(pps1 <= 0) {TIMSK &= 0xFD;} // 에러발생 시 동작 종료
 1fc:	18 16       	cp	r1, r24
 1fe:	19 06       	cpc	r1, r25
 200:	24 f0       	brlt	.+8      	; 0x20a <motor1_set_spd+0x10>
 202:	87 b7       	in	r24, 0x37	; 55
 204:	8d 7f       	andi	r24, 0xFD	; 253
 206:	87 bf       	out	0x37, r24	; 55
 208:	08 95       	ret
	else {OCR0 = (int)((15625 / pps1) - 1);}
 20a:	89 e0       	ldi	r24, 0x09	; 9
 20c:	9d e3       	ldi	r25, 0x3D	; 61
 20e:	96 d0       	rcall	.+300    	; 0x33c <__divmodhi4>
 210:	61 50       	subi	r22, 0x01	; 1
 212:	61 bf       	out	0x31, r22	; 49
 214:	08 95       	ret

00000216 <motor2_set_spd>:
}

void motor2_set_spd(int pps2)
{
 216:	bc 01       	movw	r22, r24
	if(pps2 <= 0) {TIMSK &= 0x6F;}
 218:	18 16       	cp	r1, r24
 21a:	19 06       	cpc	r1, r25
 21c:	24 f0       	brlt	.+8      	; 0x226 <motor2_set_spd+0x10>
 21e:	87 b7       	in	r24, 0x37	; 55
 220:	8f 76       	andi	r24, 0x6F	; 111
 222:	87 bf       	out	0x37, r24	; 55
 224:	08 95       	ret
	else {OCR2 = (int)((15625 / pps2) - 1);}
 226:	89 e0       	ldi	r24, 0x09	; 9
 228:	9d e3       	ldi	r25, 0x3D	; 61
 22a:	88 d0       	rcall	.+272    	; 0x33c <__divmodhi4>
 22c:	61 50       	subi	r22, 0x01	; 1
 22e:	63 bd       	out	0x23, r22	; 35
 230:	08 95       	ret

00000232 <motor1_init>:
}

void motor1_init()
{
	cli();
 232:	f8 94       	cli
	DDRA |= 0x0F;
 234:	8a b3       	in	r24, 0x1a	; 26
 236:	8f 60       	ori	r24, 0x0F	; 15
 238:	8a bb       	out	0x1a, r24	; 26
	TCCR0 |= 0x1F; // 16M / 1024 = 15625Hz
 23a:	83 b7       	in	r24, 0x33	; 51
 23c:	8f 61       	ori	r24, 0x1F	; 31
 23e:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
 240:	12 be       	out	0x32, r1	; 50
	TIMSK |= 0x02;
 242:	87 b7       	in	r24, 0x37	; 55
 244:	82 60       	ori	r24, 0x02	; 2
 246:	87 bf       	out	0x37, r24	; 55
	TIFR &= 0xFD;
 248:	86 b7       	in	r24, 0x36	; 54
 24a:	8d 7f       	andi	r24, 0xFD	; 253
 24c:	86 bf       	out	0x36, r24	; 54
	ASSR = 0x00;
 24e:	10 be       	out	0x30, r1	; 48
	sei();
 250:	78 94       	sei
 252:	08 95       	ret

00000254 <motor2_init>:
}

void motor2_init()
{
	cli();
 254:	f8 94       	cli
	DDRB |= 0x0F;
 256:	87 b3       	in	r24, 0x17	; 23
 258:	8f 60       	ori	r24, 0x0F	; 15
 25a:	87 bb       	out	0x17, r24	; 23
	TCCR2 |= 0x1D; // 16M / 1024 = 15625Hz
 25c:	85 b5       	in	r24, 0x25	; 37
 25e:	8d 61       	ori	r24, 0x1D	; 29
 260:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x00;
 262:	14 bc       	out	0x24, r1	; 36
	TIMSK |= 0x80;
 264:	87 b7       	in	r24, 0x37	; 55
 266:	80 68       	ori	r24, 0x80	; 128
 268:	87 bf       	out	0x37, r24	; 55
	TIFR &= 0xEF;
 26a:	86 b7       	in	r24, 0x36	; 54
 26c:	8f 7e       	andi	r24, 0xEF	; 239
 26e:	86 bf       	out	0x36, r24	; 54
	ASSR = 0x00;
 270:	10 be       	out	0x30, r1	; 48
	sei();
 272:	78 94       	sei
 274:	08 95       	ret

00000276 <motor1_get_spd>:
}

void motor1_get_spd(int error) // 속도 제어
{
	if(error != 0)  {motor1_set_spd(DEF_SPD - (error * CH_SPD));}
 276:	00 97       	sbiw	r24, 0x00	; 0
 278:	61 f0       	breq	.+24     	; 0x292 <motor1_get_spd+0x1c>
 27a:	48 eb       	ldi	r20, 0xB8	; 184
 27c:	bc 01       	movw	r22, r24
 27e:	46 03       	mulsu	r20, r22
 280:	90 01       	movw	r18, r0
 282:	47 9f       	mul	r20, r23
 284:	30 0d       	add	r19, r0
 286:	11 24       	eor	r1, r1
 288:	c9 01       	movw	r24, r18
 28a:	8c 50       	subi	r24, 0x0C	; 12
 28c:	9e 4f       	sbci	r25, 0xFE	; 254
 28e:	b5 cf       	rjmp	.-150    	; 0x1fa <motor1_set_spd>
 290:	08 95       	ret
	else {motor1_set_spd(DEF_SPD);}
 292:	84 ef       	ldi	r24, 0xF4	; 244
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	b1 cf       	rjmp	.-158    	; 0x1fa <motor1_set_spd>
 298:	08 95       	ret

0000029a <motor2_get_spd>:
}

void motor2_get_spd(int error)
{
	if(error != 0) {motor2_set_spd(DEF_SPD + (error * CH_SPD));}
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	59 f0       	breq	.+22     	; 0x2b4 <motor2_get_spd+0x1a>
 29e:	48 e4       	ldi	r20, 0x48	; 72
 2a0:	48 9f       	mul	r20, r24
 2a2:	90 01       	movw	r18, r0
 2a4:	49 9f       	mul	r20, r25
 2a6:	30 0d       	add	r19, r0
 2a8:	11 24       	eor	r1, r1
 2aa:	c9 01       	movw	r24, r18
 2ac:	8c 50       	subi	r24, 0x0C	; 12
 2ae:	9e 4f       	sbci	r25, 0xFE	; 254
 2b0:	b2 cf       	rjmp	.-156    	; 0x216 <motor2_set_spd>
 2b2:	08 95       	ret
	else{motor2_set_spd(DEF_SPD);}
 2b4:	84 ef       	ldi	r24, 0xF4	; 244
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	ae cf       	rjmp	.-164    	; 0x216 <motor2_set_spd>
 2ba:	08 95       	ret

000002bc <sensor_init>:
﻿#include "sensor.h"

void sensor_init()
{
	DDRC &= 0xF0;
 2bc:	84 b3       	in	r24, 0x14	; 20
 2be:	80 7f       	andi	r24, 0xF0	; 240
 2c0:	84 bb       	out	0x14, r24	; 20
 2c2:	08 95       	ret

000002c4 <get_sensor>:
}

int get_sensor()
{
	return (PINC & 0x0F);
 2c4:	83 b3       	in	r24, 0x13	; 19
 2c6:	8f 70       	andi	r24, 0x0F	; 15
}
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	08 95       	ret

000002cc <get_error>:

int get_error(int val) // 흰 바탕의 검은색 라인 검출
{
 2cc:	28 2f       	mov	r18, r24
	int error = 0;
	int check = 0;
	
	if((val & 0x08) == 0x08) {error += 3; check++;}
 2ce:	83 ff       	sbrs	r24, 3
 2d0:	05 c0       	rjmp	.+10     	; 0x2dc <get_error+0x10>
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	04 c0       	rjmp	.+8      	; 0x2e4 <get_error+0x18>
}

int get_error(int val) // 흰 바탕의 검은색 라인 검출
{
	int error = 0;
	int check = 0;
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
	return (PINC & 0x0F);
}

int get_error(int val) // 흰 바탕의 검은색 라인 검출
{
	int error = 0;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
	int check = 0;
	
	if((val & 0x08) == 0x08) {error += 3; check++;}
	if((val & 0x04) == 0x04) {error += 1; check++;}
 2e4:	22 ff       	sbrs	r18, 2
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <get_error+0x22>
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	4f 5f       	subi	r20, 0xFF	; 255
 2ec:	5f 4f       	sbci	r21, 0xFF	; 255
	if((val & 0x02) == 0x02) {error -= 1; check++;}
 2ee:	21 ff       	sbrs	r18, 1
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <get_error+0x2c>
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	4f 5f       	subi	r20, 0xFF	; 255
 2f6:	5f 4f       	sbci	r21, 0xFF	; 255
	if((val & 0x01) == 0x01) {error -= 3; check++;}
 2f8:	20 ff       	sbrs	r18, 0
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <get_error+0x36>
 2fc:	03 97       	sbiw	r24, 0x03	; 3
 2fe:	4f 5f       	subi	r20, 0xFF	; 255
 300:	5f 4f       	sbci	r21, 0xFF	; 255
	
	if(error == 4) {error -= 2;} // error가 4 or -4 (1100, 0011)일경우 error값을 2 or -2로 수정
 302:	84 30       	cpi	r24, 0x04	; 4
 304:	91 05       	cpc	r25, r1
 306:	a1 f0       	breq	.+40     	; 0x330 <get_error+0x64>
	if(error == -4) {error += 2;}
 308:	8c 3f       	cpi	r24, 0xFC	; 252
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	92 07       	cpc	r25, r18
 30e:	99 f0       	breq	.+38     	; 0x336 <get_error+0x6a>
	
	if((check == 1)&&(error == -3)) {error = -2;} //(1110, 0111)일 경우 error값을 2 or -2로 수정
 310:	41 30       	cpi	r20, 0x01	; 1
 312:	51 05       	cpc	r21, r1
 314:	91 f4       	brne	.+36     	; 0x33a <get_error+0x6e>
 316:	8d 3f       	cpi	r24, 0xFD	; 253
 318:	2f ef       	ldi	r18, 0xFF	; 255
 31a:	92 07       	cpc	r25, r18
 31c:	19 f4       	brne	.+6      	; 0x324 <get_error+0x58>
 31e:	8e ef       	ldi	r24, 0xFE	; 254
 320:	9f ef       	ldi	r25, 0xFF	; 255
 322:	08 95       	ret
	if((check == 1)&&(error == 3)) {error = 2;}
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	91 05       	cpc	r25, r1
 328:	41 f4       	brne	.+16     	; 0x33a <get_error+0x6e>
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	08 95       	ret
	if((val & 0x08) == 0x08) {error += 3; check++;}
	if((val & 0x04) == 0x04) {error += 1; check++;}
	if((val & 0x02) == 0x02) {error -= 1; check++;}
	if((val & 0x01) == 0x01) {error -= 3; check++;}
	
	if(error == 4) {error -= 2;} // error가 4 or -4 (1100, 0011)일경우 error값을 2 or -2로 수정
 330:	82 e0       	ldi	r24, 0x02	; 2
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	08 95       	ret
	if(error == -4) {error += 2;}
 336:	8e ef       	ldi	r24, 0xFE	; 254
 338:	9f ef       	ldi	r25, 0xFF	; 255
	
	if((check == 1)&&(error == -3)) {error = -2;} //(1110, 0111)일 경우 error값을 2 or -2로 수정
	if((check == 1)&&(error == 3)) {error = 2;}
	
	return error;
}
 33a:	08 95       	ret

0000033c <__divmodhi4>:
 33c:	97 fb       	bst	r25, 7
 33e:	07 2e       	mov	r0, r23
 340:	16 f4       	brtc	.+4      	; 0x346 <__divmodhi4+0xa>
 342:	00 94       	com	r0
 344:	06 d0       	rcall	.+12     	; 0x352 <__divmodhi4_neg1>
 346:	77 fd       	sbrc	r23, 7
 348:	08 d0       	rcall	.+16     	; 0x35a <__divmodhi4_neg2>
 34a:	0b d0       	rcall	.+22     	; 0x362 <__udivmodhi4>
 34c:	07 fc       	sbrc	r0, 7
 34e:	05 d0       	rcall	.+10     	; 0x35a <__divmodhi4_neg2>
 350:	3e f4       	brtc	.+14     	; 0x360 <__divmodhi4_exit>

00000352 <__divmodhi4_neg1>:
 352:	90 95       	com	r25
 354:	81 95       	neg	r24
 356:	9f 4f       	sbci	r25, 0xFF	; 255
 358:	08 95       	ret

0000035a <__divmodhi4_neg2>:
 35a:	70 95       	com	r23
 35c:	61 95       	neg	r22
 35e:	7f 4f       	sbci	r23, 0xFF	; 255

00000360 <__divmodhi4_exit>:
 360:	08 95       	ret

00000362 <__udivmodhi4>:
 362:	aa 1b       	sub	r26, r26
 364:	bb 1b       	sub	r27, r27
 366:	51 e1       	ldi	r21, 0x11	; 17
 368:	07 c0       	rjmp	.+14     	; 0x378 <__udivmodhi4_ep>

0000036a <__udivmodhi4_loop>:
 36a:	aa 1f       	adc	r26, r26
 36c:	bb 1f       	adc	r27, r27
 36e:	a6 17       	cp	r26, r22
 370:	b7 07       	cpc	r27, r23
 372:	10 f0       	brcs	.+4      	; 0x378 <__udivmodhi4_ep>
 374:	a6 1b       	sub	r26, r22
 376:	b7 0b       	sbc	r27, r23

00000378 <__udivmodhi4_ep>:
 378:	88 1f       	adc	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	5a 95       	dec	r21
 37e:	a9 f7       	brne	.-22     	; 0x36a <__udivmodhi4_loop>
 380:	80 95       	com	r24
 382:	90 95       	com	r25
 384:	bc 01       	movw	r22, r24
 386:	cd 01       	movw	r24, r26
 388:	08 95       	ret

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
